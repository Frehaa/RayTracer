module Vector

type Vector =
  | V of float * float * float
  override v.ToString() =
    match v with
      V(x,y,z) -> "["+x.ToString()+","+y.ToString()+","+z.ToString()+"]"

let mkVector x y z = ...
let getX (V(x,_,_)) = ...
let getY (V(_,y,_)) = ...
let getZ (V(_,_,z)) = ...
let getCoord ...
let multScalar ...
let magnitude ...
let dotProduct ...
let crossProduct ...
let normalise (V(x,y,z) as v) = ...
let round (V(x,y,z)) (d:int) = V(System.Math.Round(x,d),System.Math.Round(y,d),System.Math.Round(z,d))

type Vector with
  static member ( ~- ) (V(x,y,z)) = V(-x,-y,-z)
  static member ( + ) (V(ux,uy,uz),V(vx,vy,vz)) = ...
  static member ( - ) (V(ux,uy,uz),V(vx,vy,vz)) = ...
  static member ( * ) ...
  static member ( * ) ...
  static member ( % ) ...
  static member ( / ) ...
